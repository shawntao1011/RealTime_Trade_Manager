{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import time\n",
    "import zmq\n",
    "from PyQt5 import sip\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "from PyQt5 import QtCore, QtGui, QtWidgets\n",
    "from PyQt5.QtCore import QSize, Qt\n",
    "from PyQt5.QtWidgets import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 全局变量"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "AcctNameDict = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'1': 'AnyPrice', '2': 'LimitPrice', 'u': 'Unknown'}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "priceType ={}\n",
    "priceType['1'] = \"AnyPrice\"\n",
    "priceType['2'] = \"LimitPrice\"\n",
    "priceType['u'] = \"Unknown\"\n",
    "priceType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'0': 'Buy', '1': 'Sell', 'u': 'Unknown'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directionType ={}\n",
    "directionType['0'] = \"Buy\"\n",
    "directionType['1'] = \"Sell\"\n",
    "directionType['u'] = \"Unknown\"\n",
    "directionType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'0': 'Open',\n",
       " '1': 'Close',\n",
       " '3': 'CloseToday',\n",
       " '4': 'CloseYesterday',\n",
       " 'u': 'Unknown'}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "OpenCloseFlag ={}\n",
    "OpenCloseFlag['0'] = \"Open\"\n",
    "OpenCloseFlag['1'] = \"Close\"\n",
    "OpenCloseFlag['3'] = \"CloseToday\"\n",
    "OpenCloseFlag['4'] = \"CloseYesterday\"\n",
    "OpenCloseFlag['u'] = \"Unknown\"\n",
    "OpenCloseFlag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'u': 'Unknown', '1': 'Speculate', '2': 'Arbitrage'}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hedgeFlag = {}\n",
    "hedgeFlag['u'] = \"Unknown\"\n",
    "hedgeFlag['1'] = \"Speculate\"\n",
    "hedgeFlag['2'] = \"Arbitrage\"\n",
    "hedgeFlag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'1': 'New',\n",
       " '2': 'Accepted',\n",
       " '3': 'Rejected',\n",
       " '4': 'Cancelling',\n",
       " '5': 'Canceled',\n",
       " '6': 'PartTradedQueueing',\n",
       " '7': 'PartTradedNotQueueing',\n",
       " '8': 'AllTraded',\n",
       " 'u': 'Unknown'}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orderStatus ={}\n",
    "orderStatus['1'] = \"New\"\n",
    "orderStatus['2'] = \"Accepted\"\n",
    "orderStatus['3'] = \"Rejected\"\n",
    "orderStatus['4'] = \"Cancelling\"\n",
    "orderStatus['5'] = \"Canceled\"\n",
    "orderStatus['6'] = \"PartTradedQueueing\"\n",
    "orderStatus['7'] = \"PartTradedNotQueueing\"\n",
    "orderStatus['8'] = \"AllTraded\"\n",
    "orderStatus['u'] = \"Unknown\"\n",
    "orderStatus"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 相关函数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "获取账户 字典"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{8001: 'TEST-FUTURE1',\n",
       " 8002: 'TEST-STOCK1',\n",
       " 8003: 'ALPHA-1-FUT',\n",
       " 8004: 'ALPHA-1-STK',\n",
       " 8005: 'ALPHA-2-FUT',\n",
       " 8006: 'ALPHA-2-STK',\n",
       " 8007: 'ALPHA-3-FUT',\n",
       " 8008: 'ALPHA-3-STK',\n",
       " 8009: 'ALPHA-5-FUT',\n",
       " 8011: 'TEST-FUTURE2',\n",
       " 8012: 'TEST-FUTURE3',\n",
       " 8010: 'ALPHA-SW1-STK',\n",
       " 8013: 'ALPHA_SW1_FUT',\n",
       " 8014: 'JJ_STOCK',\n",
       " 8015: 'SW_FUT_2',\n",
       " 8016: 'JR7_STOCK',\n",
       " 8017: 'SW_CREDIT_1'}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def GetAcctName():\n",
    "    tb = pd.read_csv(\"./depend/accountMap.txt\",header=None)\n",
    "    tb.index = tb[0]\n",
    "    tb = tb[[1]]\n",
    "    tb.index.name=None\n",
    "    tb_dict = tb.to_dict()\n",
    "    tb_dict = tb_dict[1]\n",
    "    \n",
    "    return tb_dict\n",
    "GetAcctName()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 相关类"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Request 类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Cedar Request\n",
    "class Request(object):\n",
    "    rqAcct=0;\n",
    "    rqInstrument=\"\";\n",
    "    rqBatchID=\"\";\n",
    "    rqid=0;\n",
    "    rqDirection='u';\n",
    "    rqOrderSize=0;\n",
    "    tradedVol=0;\n",
    "    tradedAvgPrice=0;\n",
    "    fillRate=0;\n",
    "    referencePrice=0;\n",
    "\n",
    "    def fill_value(msg):\n",
    "        elems = msg.split(',')\n",
    "        rqAcct = int(elems[0])\n",
    "        rqInstrument=elems[1]\n",
    "        rqBatchID=elems[2]\n",
    "        rqid=int(elems[3])\n",
    "        rqDirection=elems[4]\n",
    "        rqOrderSize=int(elems[5])\n",
    "        tradedVol=int(elems[6])\n",
    "        tradedAvgPrice=float(elems[7])\n",
    "        fillRate=float(elems[8])\n",
    "        referencePrice=float(elems[9])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Order 类\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Cedar Order\n",
    "class Order(object):\n",
    "        m_OrderRef=0;           #### Order ref no, unique for each order in exchange\n",
    "        m_RequestID=0;          ##/< Request id, unique for each strategy\n",
    "        m_OrderSysID=\"\";        ##/< Order sys id, used by CTP, according to CTP documentation, It's quicker to use this id when cancelling an order\n",
    "        m_ProdID=\"\";            ##/< Product id\n",
    "        m_ExchID=\"\";            ##/< Exchange id\n",
    "        m_PriceType='u';        ##/< Price type, refer to \\ref PriceTypeGroup\n",
    "        m_Direction='u';        ##/< Order direction, refer to \\ref DirectionGroup\n",
    "        m_CombOffsetFlag='u';   ##/< Offest flag, refer to \\ref OffsetFlagGroup\n",
    "        m_CombHedgeFlag='u';    ##/< Hedge flag, refer to \\ref HedgeFlagGroup\n",
    "        m_LimitPrice=0;         ##/< Limit price\n",
    "        m_VolOriginal=0;        ##/< Original volume of this order\n",
    "        m_VolRemaining=0;       ##/< Remaining volume of this order\n",
    "        m_VolTraded=0;          ##/< Traded volume of this order, updated by OnRtnOrder\n",
    "        m_VolConfirmTraded=0;\t##/< Confirmed traded volume of this order, updated by OnRtnTrade\n",
    "        m_Status='u';           ##/< Order status, refer to \\ref OrderStatusGroup\n",
    "        m_ChaseTimes=0;         ##/< The times of chasing this order\n",
    "        m_SequenceNo=0;         ##/< Order sequence no, updated by exchange\n",
    "\n",
    "        def fill_value(msg):\n",
    "            elems = msg.split(',')\n",
    "            m_OrderRef=int(elems[0])\n",
    "            m_RequestID=int(elems[1])\n",
    "            m_OrderSysID=elems[2]\n",
    "            m_ProdID=elems[3]\n",
    "            m_ExchID=elems[4]\n",
    "            m_PriceType=elems[5]\n",
    "            m_Direction=elems[6]\n",
    "            m_CombOffsetFlag=elems[7]\n",
    "            m_CombHedgeFlag=elems[8]\n",
    "            m_LimitPrice=float(elems[9])\n",
    "            m_VolOriginal=int(elems[10])\n",
    "            m_VolRemaining=int(elems[11])\n",
    "            m_VolTraded=int(elems[12])\n",
    "            m_VolConfirmTraded=int(elems[13])\n",
    "            m_Status=elems[14]\n",
    "            m_ChaseTimes=int(elems[15])\n",
    "            m_SequenceNo=int(elems[16])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BatchManaer类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BatchManager():\n",
    "\n",
    "    def __init__(self):\n",
    "        self.BuyValuePerRQID = {}\n",
    "        self.SellValuePerRQID = {}\n",
    "        self.BuyTotalValuePerRQID = {}\n",
    "        self.SellTotalValuePerRQID = {}\n",
    "        self.AcctID = 0\n",
    "    def bookAcctID(self,acct):\n",
    "        self.AcctID = acct\n",
    "\n",
    "    def bookTradedValue(self,RQID,value):\n",
    "        if(value > 0):\n",
    "            self.BuyValuePerRQID[RQID] = value\n",
    "            #print(\"BUY: %f\"%(self.BuyValuePerRQID[RQID]))\n",
    "        else:\n",
    "            self.SellValuePerRQID[RQID] = value\n",
    "            #print(\"SELL: %f\"%(self.SellValuePerRQID[RQID]))\n",
    "    def bookTotalValue(self,RQID,value):\n",
    "        if(value > 0):\n",
    "            self.BuyTotalValuePerRQID[RQID] = value\n",
    "            #print(\"BUY: %f\"%(self.BuyValuePerRQID[RQID]))\n",
    "        else:\n",
    "            self.SellTotalValuePerRQID[RQID] = value\n",
    "            #print(\"SELL: %f\"%(self.SellValuePerRQID[RQID]))\n",
    "\n",
    "    def getBuyNotional(self):\n",
    "        #print(\"BUY NOTIONAL : \",self.BuyValuePerRQID.values(),sum(self.BuyValuePerRQID.values()))\n",
    "        boughtNotional = sum(self.BuyValuePerRQID.values())\n",
    "        totalBuyNotional  = sum(self.BuyTotalValuePerRQID.values())\n",
    "        myFillRate     = (boughtNotional / totalBuyNotional) if (totalBuyNotional > 0) else 0\n",
    "        return [boughtNotional,myFillRate,totalBuyNotional]\n",
    "\n",
    "    def getSellNotional(self):\n",
    "        #print(\"SELL NOTIONAL : \",self.SellValuePerRQID.values(),sum(self.SellValuePerRQID.values()))\n",
    "        soldNoitional = sum(self.SellValuePerRQID.values())\n",
    "        totalSellNotional = sum(self.SellTotalValuePerRQID.values())\n",
    "        myFillRate    = soldNoitional / totalSellNotional if((abs(totalSellNotional)) > 0) else 0\n",
    "        return [soldNoitional,myFillRate,totalSellNotional]\n",
    "\n",
    "    def getAcctID(self):\n",
    "        return self.AcctID;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## updata类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class UpdateData(QtCore.QThread):\n",
    "    requestChanged = QtCore.pyqtSignal(int, int, str)  # rowIndex, msgType,msg\n",
    "\n",
    "    def run(self):\n",
    "        requestChanged = QtCore.pyqtSignal(int, int, str)\n",
    "        context = zmq.Context()\n",
    "        sock = context.socket(zmq.SUB)\n",
    "        sock.setsockopt(zmq.SUBSCRIBE, b\"EMS_GUI_SubOda\")\n",
    "        sock.setsockopt(zmq.SUBSCRIBE, b\"EMS_GUI_Request\")\n",
    "        sock.setsockopt(zmq.SUBSCRIBE, b\"EMS_GUI_Error\")\n",
    "        sock.setsockopt(zmq.HEARTBEAT_IVL,     5000)\n",
    "        sock.setsockopt(zmq.HEARTBEAT_TIMEOUT, 3000)\n",
    "        #print(\"hello\")\n",
    "        sock.connect(\"tcp://192.168.0.66:15300\")\n",
    "        sock.connect(\"tcp://117.185.37.175:51336\")\n",
    "\t\t### DOUBLE RQID Problem\n",
    "\n",
    "        while True:\n",
    "            msg = sock.recv()\n",
    "            msgs = msg.decode(\"ascii\").split(\"|\")\n",
    "            #msgs= msg.split(',')\n",
    "            #self.dataChanged.emit(2, 2, msgs[0])\n",
    "            print(msgs[0],msgs[1])\n",
    "            if(msgs[0] == \"EMS_GUI_Request\"):\n",
    "                self.requestChanged.emit(1,1, msgs[1])\n",
    "                print(msgs[1])\n",
    "            elif(msgs[0] == \"EMS_GUI_SubOda\"):\n",
    "                self.requestChanged.emit(2,2, msgs[1])\n",
    "                print(msgs[1])\n",
    "            elif(msgs[0] == \"EMS_GUI_Error\"):\n",
    "                self.requestChanged.emit(2,3, msgs[1])\n",
    "                print(msgs[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Control_sys_Tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Control_sys_Tab(QTabWidget):\n",
    "    def __init__(self,parent=None):\n",
    "        self.RequestRowKey ={}\n",
    "        self.OrderRowKey  ={}\n",
    "        self.BatchRowKey  ={}   #To manage batch row index\n",
    "        self.ErrorRowKey  ={}   #To manage error row index\n",
    "        self.BuyBatchValue = {}\n",
    "        self.SellBatchValue= {}\n",
    "        self.BatchManagers  ={} # To manage value for each batch\n",
    "        self.g_CurrRequestRow = 0\n",
    "        self.g_CurrOrderRow  = 0\n",
    "        self.g_CurrBatchRow  = 0\n",
    "        self.g_CurrErrorRow  = 0\n",
    "        super().__init__(parent)\n",
    "        \n",
    "        self.setObjectName(\"Control_system\")\n",
    "        self.resize(1800,985)\n",
    "        self.setWindowTitle(\"实时监控系统\")\n",
    "        \n",
    "        \n",
    "        #创建3个选项卡小控件窗口\n",
    "        self.tab1=QWidget()\n",
    "        self.tab2=QWidget()\n",
    "        self.tab3=QWidget()\n",
    "        \n",
    "        \n",
    "        #将三个选项卡添加到顶层窗口中\n",
    "        self.addTab(self.tab1, \"交易界面\")\n",
    "        self.addTab(self.tab2, \"PNL展示界面\")\n",
    "        self.addTab(self.tab3, \"PNL定时发送\")\n",
    "\n",
    "        #每个选项卡自定义的内容\n",
    "        self.tab1UI()\n",
    "        self.tab2UI()\n",
    "        self.tab3UI()\n",
    "        \n",
    "        self.pushButton.clicked.connect(self.slotStart)\n",
    "    \n",
    "    def tab1UI(self):\n",
    "        #设置主布局\n",
    "        layout=QHBoxLayout()\n",
    "        \n",
    "        sec_layout=QFormLayout()\n",
    "        \n",
    "        # 创建表格窗口1\n",
    "        self.tableWidget1 = QtWidgets.QTableWidget()\n",
    "        self.tableWidget1.setRowCount(5000)\n",
    "        self.tableWidget1.setColumnCount(11)\n",
    "        self.tableWidget1.setObjectName(\"tableWidget\")\n",
    "        self.tableWidget1.setAutoFillBackground(True)\n",
    "        self.tableWidget1.setHorizontalHeaderLabels([\"Acct\",\"Instrument\",\"BatchID\",\"RQID\",\"Direction\",\"OrderSize\",\"TradedVol\",\"AvgPrice\",\"Notional\",\"FillRate\",\"RefPrice\"])\n",
    "        for i in range(0,11):\n",
    "            self.tableWidget1.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)\n",
    "        #self.tableWidget.item(0, 0).setFont(font)\n",
    "        \n",
    "        \n",
    "        # 表格窗口2\n",
    "        self.tableWidget2 = QtWidgets.QTableWidget()\n",
    "        self.tableWidget2.setRowCount(20000)\n",
    "        self.tableWidget2.setColumnCount(14)\n",
    "        self.tableWidget2.setObjectName(\"tableWidget\")\n",
    "        self.tableWidget2.setAutoFillBackground(True)\n",
    "        self.tableWidget2.setHorizontalHeaderLabels([\"OrderRef\", \"RequestID\", \"PriceType\",\"Direction\",\"OffsetFlag\",\"HedgeFlag\",\"LimitPrice\",\"VolOriginal\",\"VolRemain\",\"VolTraded\",\"VolConfirmed\",\"Status\",\"OrderSysID\",\"ExchID\"])\n",
    "        for i in range(0,14):\n",
    "            self.tableWidget2.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)\n",
    "        \n",
    "        \n",
    "        # 表格窗口3\n",
    "        self.tableWidget3 = QtWidgets.QTableWidget()\n",
    "        #self.tableWidget3.setTextAlignment(Qt.AlignHCenter)\n",
    "        self.tableWidget3.setRowCount(500)\n",
    "        self.tableWidget3.setColumnCount(6)\n",
    "        #self.tableWidget3.setStyleSheet('background-repeat:repeat;')  #font color\n",
    "        #self.tableWidget3.setStyleSheet('color:darkblue;')  #font color\n",
    "        #self.tableWidget3.setStyleSheet('text-align:center;')\n",
    "        #self.tableWidget3.setStyleSheet('vertical-align:super;')\n",
    "        #self.tableWidget3.setStyleSheet('background-color:lightblue')\n",
    "        #self.tableWidget3.horizontalHeader().setStyleSheet('QHeaderView::section{background:gray}')\n",
    "\n",
    "        self.tableWidget3.setObjectName(\"tableWidget\")\n",
    "        self.tableWidget3.setAutoFillBackground(True)\n",
    "        self.tableWidget3.setHorizontalHeaderLabels([\"BatchID\", \"AcctName\",\"BuyNotional\", \"SellNotional\",\"BuyFillRate\",\"SellFillRate\"])\n",
    "        for i in range(0,6):\n",
    "            self.tableWidget3.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)\n",
    "            #self.tableWidget3.\n",
    "        self.tableWidget3.setColumnWidth(0,150)\n",
    "        self.tableWidget3.setColumnWidth(1,150)\n",
    "        self.tableWidget3.setColumnWidth(2,100)\n",
    "        self.tableWidget3.setColumnWidth(3,100)\n",
    "        self.tableWidget3.setColumnWidth(4,100)\n",
    "        self.tableWidget3.setColumnWidth(5,100)\n",
    "        #self.label = QtWidgets.QLabel(self.centralwidget)\n",
    "        #self.label.setGeometry(QtCore.QRect(360, 70, 300, 50))\n",
    "        #self.label.setObjectName(\"label\")\n",
    "        #self.label.setAutoFillBackground(True)\n",
    "        #self.label.setAlignment(QtCore.Qt.AlignCenter)\n",
    "        #self.label.setStyleSheet(\"border-image:url(images/title.png)\")\n",
    "        \n",
    "        \n",
    "        self.pushButton = QtWidgets.QPushButton()\n",
    "        #self.pushButton.setMaximumWidth(100)\n",
    "        self.pushButton.setObjectName(\"pushButton\")\n",
    "        self.pushButton.setText(\"开始运行\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        # 添加表单2进 子布局\n",
    "        sec_layout.addWidget(self.tableWidget2)\n",
    "        \n",
    "        # 添加表单3进 子布局\n",
    "        sec_layout.addWidget(self.tableWidget3)\n",
    "        \n",
    "        # 添加 按钮 进 子布局\n",
    "        sec_layout.addWidget(self.pushButton)\n",
    "        \n",
    "        # 添加表单1 进主布局，子布局进主布局\n",
    "        layout.addWidget(self.tableWidget1)\n",
    "        layout.addLayout(sec_layout)\n",
    "        \n",
    "\n",
    "        self.tab1.setLayout(layout)\n",
    "        \n",
    "        \n",
    "        \n",
    "    def tab2UI(self):\n",
    "        \n",
    "        return \n",
    "    \n",
    "    def tab3UI(self):\n",
    "        \n",
    "        return \n",
    "    \n",
    "    ##############################################################\n",
    "#     PyQt5 中的pyQtslot 是python中的decorator，用其可以将一个method 定义为 槽\n",
    "    \n",
    "#     槽的传参方式 主要是直接传入一个 函数指针\n",
    "    \n",
    "    ##############################################################\n",
    "    \n",
    "    \n",
    "    @QtCore.pyqtSlot()\n",
    "    def slotStart(self):\n",
    "        #按钮 暂停使用\n",
    "        self.pushButton.setEnabled(False) \n",
    "        # 开启一个新进程用来 更新数据\n",
    "        self.update_data_thread = UpdateData(self) \n",
    "        self.update_data_thread.requestChanged.connect(self.onRequestChanged)\n",
    "        # 线程进入 准备阶段\n",
    "        self.update_data_thread.start()\n",
    "\n",
    "    @QtCore.pyqtSlot(int, int, str)\n",
    "    def onRequestChanged(self, row, msgType, text):\n",
    "        elems = text.split(',')\n",
    "        #row =0\n",
    "        column = 0\n",
    "        if(msgType == 1):\n",
    "            myKey = self.RequestRowKey.get(elems[2] + elems[3])\n",
    "            if( myKey== None):\n",
    "                myKey = self.g_CurrRequestRow\n",
    "                self.g_CurrRequestRow+=1\n",
    "                self.RequestRowKey[elems[2] + elems[3]] = myKey           ### CREATE A REQUEST ROW\n",
    "\n",
    "            for ele in elems:\n",
    "                it = self.tableWidget1.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget1.setItem(myKey, column, it)\n",
    "                if(column==0):\n",
    "                    it.setText(AcctNameDict[int(ele)])\n",
    "                    #print(\"What is this: %d, and acctName =  %s\"%(int(ele),AcctNameDict[int(ele)]))\n",
    "                elif(column==4):\n",
    "                    it.setText(directionType[ele])\n",
    "                else:\n",
    "                    it.setText(ele)\n",
    "                column+=1\n",
    "            self.tableWidget1.selectRow(myKey)\n",
    "\n",
    "            myKey = self.BatchRowKey.get(elems[2])\n",
    "            if( myKey== None):### UPDATE ACCT-BATCH TABLE HERE\n",
    "                myKey = self.g_CurrBatchRow\n",
    "                self.g_CurrBatchRow+=1\n",
    "                self.BatchRowKey[elems[2]] = myKey\n",
    "                self.BatchManagers[elems[2]] = BatchManager()                        ### CREATE A BATCH MANAGER\n",
    "                self.BatchManagers[elems[2]].bookAcctID(int(elems[0]))\n",
    "            #print(\"what is the direction code: %s\"%(elems[4]))\n",
    "            myTradeDirection = 1.0 if (int(elems[4]) == 0) else -1.0\n",
    "            self.BatchManagers[elems[2]].bookTotalValue(elems[3],float(elems[5])*float(elems[10])*myTradeDirection)\n",
    "            self.BatchManagers[elems[2]].bookTradedValue(elems[3],float(elems[8]))   ### need to change here\n",
    "            print(elems[3],float(elems[8]))\n",
    "\n",
    "            ### FILL INFORMATION IN THIS ROW\n",
    "            ###print(\"GET NOTIONA:\",str(self.BatchManagers[elems[2]].getBuyNotional()),str(self.BatchManagers[elems[2]].getSellNotional()))\n",
    "            thisAcctID = self.BatchManagers[elems[2]].getAcctID()\n",
    "            thisAcctIDStr = AcctNameDict[thisAcctID]\n",
    "            vals1      = self.BatchManagers[elems[2]].getBuyNotional()\n",
    "            vals2      = self.BatchManagers[elems[2]].getSellNotional()\n",
    "            vals       = [elems[2],thisAcctIDStr,\"{:,.2f}\".format(vals1[0]),\"{:,.2f}\".format(vals2[0]),\"{:.2%}\".format(vals1[1]),\"{:.2%}\".format(vals2[1])]\n",
    "            for column in range(0,6):\n",
    "                it = self.tableWidget3.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget3.setItem(myKey, column, it)\n",
    "                it.setText(vals[column])\n",
    "            self.tableWidget3.selectRow(myKey)\n",
    "\n",
    "        elif(msgType == 2):\n",
    "            myKey = self.OrderRowKey.get(elems[0] + elems[1] + elems[12])\n",
    "            if( myKey== None):\n",
    "                myKey = self.g_CurrOrderRow\n",
    "                self.g_CurrOrderRow+=1\n",
    "                self.OrderRowKey[elems[0] + elems[1] + elems[12]] = myKey\n",
    "            for ele in elems:\n",
    "                it = self.tableWidget2.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget2.setItem(myKey, column, it)# can be done in dictionary of dictionary way, better\n",
    "                if(column==3):\n",
    "                    it.setText(directionType[ele])\n",
    "                elif(column==4):\n",
    "                    it.setText(OpenCloseFlag[ele])\n",
    "                elif(column==5):\n",
    "                    it.setText(hedgeFlag[ele])\n",
    "                elif(column==11):\n",
    "                    it.setText(orderStatus[ele])\n",
    "                else:\n",
    "                    it.setText(ele)\n",
    "                column+=1\n",
    "            self.tableWidget2.selectRow(myKey)\n",
    "\t\t\t\n",
    "        elif(msgType == 3):\n",
    "            myKey = self.ErrorRowKey.get(elems[0] + elems[2])\n",
    "            if( myKey== None):\n",
    "                myKey = self.g_CurrErrorRow\n",
    "                self.g_CurrErrorRow += 1\n",
    "                self.ErrorRowKey[elems[0] + elems[2]] = myKey\n",
    "            for ele in elems:\n",
    "                it = self.tableWidget4.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget4.setItem(myKey, column, it)# can be done in dictionary of dictionary way, better\n",
    "                it.setText(ele)\n",
    "                column+=1\n",
    "            self.tableWidget4.selectRow(myKey)\n",
    "        else:\n",
    "            self.tableWidget1.selectRow(row)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys([8001, 8002, 8003, 8004, 8005, 8006, 8007, 8008, 8009, 8011, 8012, 8010, 8013, 8014, 8015, 8016, 8017, 0])\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "0",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\taosu\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3339: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    AcctNameDict = GetAcctName()#pd.read_csv(\"./depend/accountMap.txt\")\n",
    "    AcctNameDict[0] = \"UNKNOWN\"\n",
    "    print(AcctNameDict.keys())\n",
    "    app = QtWidgets.QApplication.instance()\n",
    "    if app is None:\n",
    "        app = QtWidgets.QApplication(sys.argv)\n",
    "    w = Control_sys_Tab()\n",
    "    w.show()\n",
    "    sys.exit(app.exec_())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# UI_control_system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Ui_Control_system(QTabWidget):\n",
    "    \n",
    "\n",
    "    def setupUi(self, Control_system):\n",
    "\n",
    "        Control_system.setObjectName(\"Control_system\")\n",
    "        Control_system.resize(1800, 985)\n",
    "        #Control_system.setFixedSize(1004, 722)\n",
    "\n",
    "        Control_system.setWindowIcon(QtGui.QIcon(\"images/icon.png\"))\n",
    "        Control_system.setStyleSheet(\n",
    "            \"QMainWindow{border-image:url(images/background.jpg)}\"\n",
    "        )\n",
    "        \n",
    "        \n",
    "        self.centralwidget = QtWidgets.QWidget(Control_system)\n",
    "        self.centralwidget.setObjectName(\"centralwidget\")\n",
    "\n",
    "        # 表格显示\n",
    "\n",
    "        self.tableWidget1 = QtWidgets.QTableWidget(self.centralwidget)\n",
    "        self.tableWidget1.setGeometry(QtCore.QRect(10, 10, 925, 910))\n",
    "        self.tableWidget1.setRowCount(5000)\n",
    "        self.tableWidget1.setColumnCount(11)\n",
    "        self.tableWidget1.setObjectName(\"tableWidget\")\n",
    "        Control_system.setCentralWidget(self.centralwidget)\n",
    "        self.tableWidget1.setAutoFillBackground(True)\n",
    "        self.tableWidget1.setHorizontalHeaderLabels([\"Acct\",\"Instrument\",\"BatchID\",\"RQID\",\"Direction\",\"OrderSize\",\"TradedVol\",\"AvgPrice\",\"Notional\",\"FillRate\",\"RefPrice\"])\n",
    "        for i in range(0,11):\n",
    "            self.tableWidget1.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)\n",
    "        #self.tableWidget.item(0, 0).setFont(font)\n",
    "\n",
    "        self.tableWidget2 = QtWidgets.QTableWidget(self.centralwidget)\n",
    "        self.tableWidget2.setGeometry(QtCore.QRect(945, 10, 960, 450))\n",
    "        self.tableWidget2.setRowCount(20000)\n",
    "        self.tableWidget2.setColumnCount(14)\n",
    "        self.tableWidget2.setObjectName(\"tableWidget\")\n",
    "        Control_system.setCentralWidget(self.centralwidget)\n",
    "        self.tableWidget2.setAutoFillBackground(True)\n",
    "        self.tableWidget2.setHorizontalHeaderLabels([\"OrderRef\", \"RequestID\", \"PriceType\",\"Direction\",\"OffsetFlag\",\"HedgeFlag\",\"LimitPrice\",\"VolOriginal\",\"VolRemain\",\"VolTraded\",\"VolConfirmed\",\"Status\",\"OrderSysID\",\"ExchID\"])\n",
    "        for i in range(0,14):\n",
    "            self.tableWidget2.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)\n",
    "        #self.tableWidget.item(0, 0).setFont(font)\n",
    "\n",
    "        self.tableWidget3 = QtWidgets.QTableWidget(self.centralwidget)\n",
    "        #self.tableWidget3.setTextAlignment(Qt.AlignHCenter)\n",
    "        self.tableWidget3.setGeometry(QtCore.QRect(945, 470, 960, 450))\n",
    "        self.tableWidget3.setRowCount(500)\n",
    "        self.tableWidget3.setColumnCount(6)\n",
    "        #self.tableWidget3.setStyleSheet('background-repeat:repeat;')  #font color\n",
    "        #self.tableWidget3.setStyleSheet('color:darkblue;')  #font color\n",
    "        #self.tableWidget3.setStyleSheet('text-align:center;')\n",
    "        #self.tableWidget3.setStyleSheet('vertical-align:super;')\n",
    "        #self.tableWidget3.setStyleSheet('background-color:lightblue')\n",
    "        #self.tableWidget3.horizontalHeader().setStyleSheet('QHeaderView::section{background:gray}')\n",
    "\n",
    "        self.tableWidget3.setObjectName(\"tableWidget\")\n",
    "        Control_system.setCentralWidget(self.centralwidget)\n",
    "        self.tableWidget3.setAutoFillBackground(True)\n",
    "        self.tableWidget3.setHorizontalHeaderLabels([\"BatchID\", \"AcctName\",\"BuyNotional\", \"SellNotional\",\"BuyFillRate\",\"SellFillRate\"])\n",
    "        for i in range(0,6):\n",
    "            self.tableWidget3.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)\n",
    "            #self.tableWidget3.\n",
    "        self.tableWidget3.setColumnWidth(0,150)\n",
    "        self.tableWidget3.setColumnWidth(1,150)\n",
    "        self.tableWidget3.setColumnWidth(2,100)\n",
    "        self.tableWidget3.setColumnWidth(3,100)\n",
    "        self.tableWidget3.setColumnWidth(4,100)\n",
    "        self.tableWidget3.setColumnWidth(5,100)\n",
    "        #self.label = QtWidgets.QLabel(self.centralwidget)\n",
    "        #self.label.setGeometry(QtCore.QRect(360, 70, 300, 50))\n",
    "        #self.label.setObjectName(\"label\")\n",
    "        #self.label.setAutoFillBackground(True)\n",
    "        #self.label.setAlignment(QtCore.Qt.AlignCenter)\n",
    "        #self.label.setStyleSheet(\"border-image:url(images/title.png)\")\n",
    "\n",
    "        '''\n",
    "        self.tableWidget4 = QtWidgets.QTableWidget(self.centralwidget)\n",
    "        self.tableWidget4.setGeometry(QtCore.QRect(1450, 470, 450, 450))\n",
    "        self.tableWidget4.setRowCount(5000)\n",
    "        self.tableWidget4.setColumnCount(4)\n",
    "        self.tableWidget4.setObjectName(\"tableWidget\")\n",
    "        Control_system.setCentralWidget(self.centralwidget)\n",
    "        self.tableWidget4.setAutoFillBackground(True)\n",
    "        self.tableWidget4.setHorizontalHeaderLabels([\"AcctID\",\"Instrument\", \"OrderRef\", \"ErrorMsg\"])\n",
    "        for i in range(0,4):\n",
    "            self.tableWidget4.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)\n",
    "        #self.tableWidget.item(0, 0).setFont(font)\n",
    "        '''\n",
    "\t\t\n",
    "        self.pushButton = QtWidgets.QPushButton(self.centralwidget)\n",
    "        self.pushButton.setGeometry(QtCore.QRect(1000, 925, 121, 41))\n",
    "        self.pushButton.setObjectName(\"pushButton\")\n",
    "\n",
    "        Control_system.setCentralWidget(self.centralwidget)\n",
    "        self.statusbar = QtWidgets.QStatusBar(Control_system)\n",
    "        self.statusbar.setObjectName(\"statusbar\")\n",
    "        Control_system.setStatusBar(self.statusbar)\n",
    "\n",
    "        self.retranslateUi(Control_system)\n",
    "        QtCore.QMetaObject.connectSlotsByName(Control_system)\n",
    "\n",
    "    def retranslateUi(self, Control_system):\n",
    "        _translate = QtCore.QCoreApplication.translate\n",
    "        Control_system.setWindowTitle(_translate(\"Control_system\", \"实时监控系统\"))\n",
    "        self.pushButton.setText(_translate(\"Control_system\", \"开始运行\"))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Control_system类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Control_system(QtWidgets.QMainWindow, Ui_Control_system):\n",
    "\n",
    "    def __init__(self, parent=None):\n",
    "        super(Control_system, self).__init__(parent)\n",
    "        self.RequestRowKey ={}\n",
    "        self.OrderRowKey  ={}\n",
    "        self.BatchRowKey  ={}   #To manage batch row index\n",
    "        self.ErrorRowKey  ={}   #To manage error row index\n",
    "        self.BuyBatchValue = {}\n",
    "        self.SellBatchValue= {}\n",
    "        self.BatchManagers  ={} # To manage value for each batch\n",
    "        self.g_CurrRequestRow = 0\n",
    "        self.g_CurrOrderRow  = 0\n",
    "        self.g_CurrBatchRow  = 0\n",
    "        self.g_CurrErrorRow  = 0\n",
    "        super().__init__(parent)\n",
    "        self.setupUi(self)\n",
    "        self.pushButton.clicked.connect(self.slotStart)\n",
    "\n",
    "    @QtCore.pyqtSlot()\n",
    "    def slotStart(self):\n",
    "        self.pushButton.setEnabled(False)\n",
    "        self.update_data_thread = UpdateData(self)\n",
    "        self.update_data_thread.requestChanged.connect(self.onRequestChanged)\n",
    "        self.update_data_thread.start()\n",
    "\n",
    "    @QtCore.pyqtSlot(int, int, str)\n",
    "    def onRequestChanged(self, row, msgType, text):\n",
    "        elems = text.split(',')\n",
    "        #row =0\n",
    "        column = 0\n",
    "        if(msgType == 1):\n",
    "            myKey = self.RequestRowKey.get(elems[2] + elems[3])\n",
    "            if( myKey== None):\n",
    "                myKey = self.g_CurrRequestRow\n",
    "                self.g_CurrRequestRow+=1\n",
    "                self.RequestRowKey[elems[2] + elems[3]] = myKey           ### CREATE A REQUEST ROW\n",
    "\n",
    "            for ele in elems:\n",
    "                it = self.tableWidget1.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget1.setItem(myKey, column, it)\n",
    "                if(column==0):\n",
    "                    it.setText(AcctNameDict[int(ele)])\n",
    "                    #print(\"What is this: %d, and acctName =  %s\"%(int(ele),AcctNameDict[int(ele)]))\n",
    "                elif(column==4):\n",
    "                    it.setText(directionType[ele])\n",
    "                else:\n",
    "                    it.setText(ele)\n",
    "                column+=1\n",
    "            self.tableWidget1.selectRow(myKey)\n",
    "\n",
    "            myKey = self.BatchRowKey.get(elems[2])\n",
    "            if( myKey== None):### UPDATE ACCT-BATCH TABLE HERE\n",
    "                myKey = self.g_CurrBatchRow\n",
    "                self.g_CurrBatchRow+=1\n",
    "                self.BatchRowKey[elems[2]] = myKey\n",
    "                self.BatchManagers[elems[2]] = BatchManager()                        ### CREATE A BATCH MANAGER\n",
    "                self.BatchManagers[elems[2]].bookAcctID(int(elems[0]))\n",
    "            #print(\"what is the direction code: %s\"%(elems[4]))\n",
    "            myTradeDirection = 1.0 if (int(elems[4]) == 0) else -1.0\n",
    "            self.BatchManagers[elems[2]].bookTotalValue(elems[3],float(elems[5])*float(elems[10])*myTradeDirection)\n",
    "            self.BatchManagers[elems[2]].bookTradedValue(elems[3],float(elems[8]))   ### need to change here\n",
    "            print(elems[3],float(elems[8]))\n",
    "\n",
    "            ### FILL INFORMATION IN THIS ROW\n",
    "            ###print(\"GET NOTIONA:\",str(self.BatchManagers[elems[2]].getBuyNotional()),str(self.BatchManagers[elems[2]].getSellNotional()))\n",
    "            thisAcctID = self.BatchManagers[elems[2]].getAcctID()\n",
    "            thisAcctIDStr = AcctNameDict[thisAcctID]\n",
    "            vals1      = self.BatchManagers[elems[2]].getBuyNotional()\n",
    "            vals2      = self.BatchManagers[elems[2]].getSellNotional()\n",
    "            vals       = [elems[2],thisAcctIDStr,\"{:,.2f}\".format(vals1[0]),\"{:,.2f}\".format(vals2[0]),\"{:.2%}\".format(vals1[1]),\"{:.2%}\".format(vals2[1])]\n",
    "            for column in range(0,6):\n",
    "                it = self.tableWidget3.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget3.setItem(myKey, column, it)\n",
    "                it.setText(vals[column])\n",
    "            self.tableWidget3.selectRow(myKey)\n",
    "\n",
    "        elif(msgType == 2):\n",
    "            myKey = self.OrderRowKey.get(elems[0] + elems[1] + elems[12])\n",
    "            if( myKey== None):\n",
    "                myKey = self.g_CurrOrderRow\n",
    "                self.g_CurrOrderRow+=1\n",
    "                self.OrderRowKey[elems[0] + elems[1] + elems[12]] = myKey\n",
    "            for ele in elems:\n",
    "                it = self.tableWidget2.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget2.setItem(myKey, column, it)# can be done in dictionary of dictionary way, better\n",
    "                if(column==3):\n",
    "                    it.setText(directionType[ele])\n",
    "                elif(column==4):\n",
    "                    it.setText(OpenCloseFlag[ele])\n",
    "                elif(column==5):\n",
    "                    it.setText(hedgeFlag[ele])\n",
    "                elif(column==11):\n",
    "                    it.setText(orderStatus[ele])\n",
    "                else:\n",
    "                    it.setText(ele)\n",
    "                column+=1\n",
    "            self.tableWidget2.selectRow(myKey)\n",
    "\n",
    "        elif(msgType == 3):\n",
    "            myKey = self.ErrorRowKey.get(elems[0] + elems[2])\n",
    "            if( myKey== None):\n",
    "                myKey = self.g_CurrErrorRow\n",
    "                self.g_CurrErrorRow += 1\n",
    "                self.ErrorRowKey[elems[0] + elems[2]] = myKey\n",
    "            for ele in elems:\n",
    "                it = self.tableWidget4.item(myKey, column)\n",
    "                if it is None:\n",
    "                    it = QtWidgets.QTableWidgetItem()\n",
    "                    self.tableWidget4.setItem(myKey, column, it)# can be done in dictionary of dictionary way, better\n",
    "                it.setText(ele)\n",
    "                column+=1\n",
    "            self.tableWidget4.selectRow(myKey)\n",
    "        else:\n",
    "            self.tableWidget1.selectRow(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
